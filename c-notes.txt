C Codes
A C program for inserting a given character in a given strength.
#include<stdio.h>
#include<string.h>
void main()
        {
            char name[100],revname[100],C;
            int i,j,k,length,position;

            printf("Enter a string\n");
            gets(name);
            printf("Entered  string is.....\n");
            puts(name);
            length=strlen(name);

printf("enter the character and the postion to insert and position less than or equal to %d\n",strlen(name)+1);
            scanf("%c %d",&C,&position);
            //printf("Entered  string length is...%d\n",strlen(name));

            for(i=length;i>=position-1;--i)
                name[i+1]=name[i];
            name[i+1]=C;
            printf("the new   string is...%d\n",strlen(name));
puts(name);
            getch();
            //Dr.N.Rama Gopal
        }
A C program for demonstrating strings comparison and concatenation 
#include<stdio.h>
#include<string.h>
void main()
        {
            char str1[100],str2[100];
            int num;

            printf("Enter a string1\n");
            gets(str1);
            printf("Enter a string2\n");
            gets(str2);

            printf("\nEntered  string are.....\n\n");
            puts(str1);
            printf("&\n");
            puts(str2);

           printf("%d\n",num=strcmp(str1,str2));
           if(num<0) printf("first string is lexicographically first string\n");
                else if(num>0) printf("Second string is lexicographically first string\n");
                     else printf("both are equal or same strings\n");

            printf("\n the string resulting from concatinating first and second is.....\n");
            strcat(str1,str2);
            puts(str1);
            printf("\n the second string after copying first string into it is.....\n");
            strcpy(str2,str1);
            puts(str1);
            getch();
        }
A program to Check and print if given number is prime or not, using user defined function.
#include<stdio.h>
#include<math.h>
void main()
    {
        int num;
        void check_prime(int n);
        printf("Enter the number to be checked if it is prime\n");
        scanf("%d",&num);
        check_prime(num);
        getch();
    }
void check_prime(int n)
    {
        int i=2;
        if(n==1) {printf("The given number is not a prime\n");return;}
        while(i<=sqrt(n))
        	{
            	if(n%i==0) {printf("The given mumber %d is not a prime\n",n);break;}
            	++i;
        	}
        if(i>sqrt(n)) printf("The given number is prime\n");
        return;
    }
A program to count and print number of characters of given string using user defined function.
#include<stdio.h>
#include<string.h>

int str_len(char str[])
    {
       int i,len=0;
       for(i=0;str[i] !='\0';++i);
       len=i;
       return;
    }
void main()
    {
        char str[50],len;
        printf("Enter a string\n");
        gets(str);
        len=str_len(str);
printf("The number of characters in the given string i.e., length of the string is %d\n",len);
        getch();
    }
A C program to print factorial of a given integer using user defined recursive function
#include<stdio.h>
#include<math.h>
void main()
    {
            int n,fact,i;
            printf("Enter an integer for cal'g factorial\n");
            scanf("%d",&n);

            fact=factorial_n(n);
            printf("The factorial value of %d is %d\n",n,fact);
            getch();
    }

 int factorial_n(int n)
    {
        if(n==1) return(n);
        else return(n*factorial_n(n-1));
    }
A C program to print a given string in reverse using user defined recursive function
#include<stdio.h>
#define EOLN '\n'

void reverse(void);

void main()
    {
            printf("Enter the a line\n");
            reverse();
            getch();
    }

 void reverse(void)
    {
        char c;
            if ((c=getchar()) != EOLN) reverse();
            putchar(c);
        return;
    }
A C program to to pass on 1D arrays to user defined functions by value.
#include<stdio.h>
#include<math.h>
void main()
    {
        float x[10];
        int i,j,n;

        void read_1D_array(int n,float x[]);
        void printf_1D_array(int n,float x[]);
        void sort_1D_array(int n,float x[]);

        printf("Enter a list of floating point values\n");
        pintf("how many number of values(<10)\n");
        scanf("%d",&n);

        read_1D_array(n,x);
        printf("The entered list of values are\n");
        printf_1D_array(n,x);

        sort_1D_array(n,x);

        printf("The sorted list is\n");
        printf_1D_array(n,x);

        getch();
    }
void read_1D_array(int n,float x[])
        {
            int i,j;
            for(i=0;i<n;i++)
                scanf("%f",&x[i]);
            return;

        }
void printf_1D_array(int n,float x[])
 {
            int i,j;
            for(i=0;i<n;i++)
                printf("%f  ",x[i]);
            return;

        }
void sort_1D_array(int n,float x[])
    {
            int i,j;
            float c;
            for(i=0;i<n-1;++i)
            for(j=i+1;j<n;j++)
                        if(x[i]>x[j])
                          {
                                c=x[i];
                                x[i]=x[j];
                                x[j]=c;
                          }
            return;

    }
A C program to pass 2D arrays to function by value
#include<stdio.h>
#include<math.h>
void main()
    {
        float x[10][10],y[10][10],z[10][10];
        int rowsx,colsx,rowsy,colsy;

        void read_2D_array(int rows,int cols,float x[][10]);
        void print_2D_array(int rows,int cols,float x[][10]);
        void add_2D_array(int rows,int cols,float x[][10],float y[][10],float z[][10]);

        printf("Enter size of 2 D matrix-x (Max Size: 10 x 10)\n");
        scanf("%d %d",&rowsx,&colsx);

        read_2D_array(rowsx,colsx,x);

        printf("Enter size of 2 D matrix -y(Max Size: 10 x 10)\n");
        scanf("%d %d",&rowsy,&colsy);

        read_2D_array(rowsy,colsy,y);

        printf("\n\nThe entered matrix x..is..\n");
        print_2D_array(rowsx,colsx,x);

        printf("\n\nThe entered matrix y..is..\n");
        print_2D_array(rowsy,colsy,y);

        add_2D_array(rowsx,colsx,x,y,z);
        printf("\n\nThe z matrix = x+y..is..\n");
        print_2D_array(rowsy,colsy,z);

        getch();
    }

void read_2D_array(int rows,int cols,float x[][10])
        {
            int i,j;
            printf("\nEnter %d x %d size matrix\n",rows,cols);
            for(i=0;i<rows;i++)
            {
                printf("Enter row %d values\n",i+1);
                for(j=0;j<cols;j++)
                     scanf("%f",&x[i][j]);
            }
            return;
        }
void print_2D_array(int rows,int cols,float x[][10])
        {
            int i,j;
            for(i=0;i<rows;i++)
                {
                    printf("\n");
                    for(j=0;j<cols;j++)
                            printf("%0.3f  ",x[i][j]);
                }
             printf("\n");
            return;
        }
void add_2D_array(int rows,int cols,float x[][10],float y[][10],float z[][10])
        {
                    int i,j;
                    for(i=0;i<rows;i++)
                        {
                            for(j=0;j<cols;j++)
                                   z[i][j]=x[i][j]+y[i][j];
                        }
                    return;
        }
Program to illustrate concept of pointers. Declaration, assigning values, and printing values
#include <stdio.h>
void main( )
{
        int u = 3, v;
        int *pu=&u;
        int  *pv=&v;
        //pu = &u;
        v = *pu;
       // pv = &v;
        printf(" u = %d  &u = %x   pu = %x    *pu= %d\n", u, &u, pu, *pu);
        printf(" v= %d  &v=%x pv=%x *pv= %d \n", v, &v, pv, *pv);
        getch();
}
A C program to demonstrate distinction between passing variables value and by reference.
#include<stdio.h>

void funct1( int u,int v);  /*function prototype */
void funct2 (int *pu, int *pv); /* function prototype */
main ( )
        {
            int u = 1;
            int  v = 3;
            printf("\nCalling by value\n");
            printf ("\nbefore calling funct1 : u=%d v=%d\n", u, v);
            funct1(u,v);
            printf("after calling funct1 : u=%d v=%d\n", u, v);
            printf("\nCalling by reference\n");
            printf ("\nBefore calling funct2: u=%d v=%d\n",u, v) ;
            funct2(&u, &v);
            printf ("After calling funct2: u=%d v=%d\n", u, v);
        }
void funct1( int u, int v)
         {
            u = 0;
            v = 0;
            printf ("Within calling function1 : u=%d v=%d\n", u, v);
            return;
        }
void funct2( int *pu, int *pv)
        {
            *pu = 0;
            *pv = 0;
            printf ("within  funct2: *pu = %d *pv = %d\n" , *pu, *pv) ;
            return;
        }
A C program to read in a string and count vowels, consonants, digits, whitespaces and other characters using pointers, functions and passing on pointers to user defined function. 
#include <stdio.h>
#include<string.h>
void scan_line(char line[], int *pv,int *pc,int *pd,int *pw,int *po);
void main( )
{
        char line[80];
        int vowels = 0, consonents = 0, digits = 0, wtspc = 0, other = 0;

        printf("Enter a line of txt\n");
        gets(line); puts(line);
        scan_line(line, &vowels,&consonents,&digits,&wtspc,&other);

        printf("no.of vowels = %d\n",vowels);
        printf("no.of consonents = %d\n",consonents);
        printf("no.of  digits = %d\n",digits);
        printf("no.of white spaces = %d\n",wtspc);
        printf("no.of  other characters = %d\n",other);

        getch();
}
void scan_line(char line[], int *pv,int *pc,int *pd,int *pw,int *po)
    {
        char c;
        int count=0;
        while((c=toupper(line[count])) != '\0')
              {
                    if(c=='A' || c=='E' || c=='I' || c=='O' || c=='U' ) ++ *pv;
                    else if(c>='A' && c<='Z' ) ++ *pc;
                            else if(c>= '0' && c<='9' ) ++ *pd;
                                    else if((c ==' ') || (c == '\t' )) ++ *pw;
                                            else ++ *po;
                ++count;
              }
        return;
    }
A C programming for reordering list of values using dynamic memory allocation for 1D array
#include<stdio.h>
void reorder(int n,int *x);
void main()
    {
        int i,n,*x;

        printf("Enter number of values in the list\n");
        scanf("%d",&n);

        x=(int *)malloc(n*sizeof(int));

        printf("Enter values of the list\n");
        for(i=0;i<n;i++) scanf("%d",x+i);

        reorder(n,x);

        printf("Entered values of the list are.....\n");
        for(i=0;i<n;i++) printf("%d  ",x[i]);

        getch();
    }
void reorder(int n,int *x)
    {
        int i,j,temp;
        for(i=0;i<n-1;i++)
            for(j=i+1;j<n;j++)
                 {
                    if(x[i]>x[j])
                        {
                            temp=x[i];
                            x[i]=x[j];
                            x[j]=temp;
                        }
                 }
        return;
    }
A C program to illustrate Dynamic memory allocation for 2D array and processing
#include<stdio.h>
#include<math.h>

float **allocatemem_matrix(float **a,int *rows,int *cols);
void  read_matrix(float **a,int *rows,int *cols);
void  print_matrix(float **a,int *rows,int *cols);

void main()
        {

                int i,j,k,rowsA,colsA,rowsB,colsB,rowsC,colsC;
                float **a,**b,**c;

                 printf("\n Enter the size of 2D array 'A' rows x cols\n");
                        scanf("%d %d", &rowsA,&colsA);
                 a= allocatemem_matrix(a,&rowsA,&colsA);

                printf("\n Enter the size of 2D array 'B' rows x cols\n");
                        scanf("%d %d", &rowsB,&colsB);
                 b= allocatemem_matrix(b,&rowsB,&colsB);

                printf("\n Enter matrix values for 'A' \n");
                read_matrix(a,&rowsA,&colsA);

                printf("\n Enter matrix values for 'B' \n");
                read_matrix(b,&rowsB,&colsB);

                printf("\n Entered matrix values of 'A' \n");
                print_matrix(a,&rowsA,&colsA);

                printf("\n Entered matrix values of 'B' \n");
                print_matrix(b,&rowsB,&colsB);

                printf("\n");

                getch();

        }
float **allocatemem_matrix(float **a,int *rows,int *cols)
        {
            int i,j,k;

           // *rows = nrows; *cols = ncols;
                a = (float **)malloc((*rows)*sizeof(float *));

                for(i=0;i<(*rows);i++)
                    a[i]= (float *)malloc((*cols) *sizeof(float));

            return(a);
        }

void read_matrix(float **a,int *rows,int *cols)
        {
            int i,j;
             for(i=0;i<*rows;i++) {printf("enter %d row values\n",i+1);
                    for(j=0;j<*cols;j++)
                        scanf("%f",(a[i]+j); }
            return;
        }
void  print_matrix(float **a,int *rows,int *cols)
        {
                int i,j;
                for(i=0;i<*rows;i++) {printf("\n");
                    for(j=0;j<*cols;j++)
                            printf("%0.3f  ",*(a[i]+j); }
                return;

        }
Theory
1.	What is an array? What is advantage of arrays? 
2.	How array is processed?
3.	What is a string? 
4.	What are string operations related functions? 
5.	Define statistical parameters like mean, mode and median
6.	What is Fibonacci series?
7.	What is a prime number?
8.	What are prime factors of a given number?
9.	What is a palindrome?
10.	What is sorting? And what are different sorting techniques?
11.	What is insertion sort? Explain with an example?
12.	What is linear search? Explain with an example
13.	What is a function in C programming language? What are advantages of functions? 
14.	Explain function declaration, definition and call with an example. 
15.	What is a recursive function? How do you find GCD / Greatest Common Divisor using recursive function?
16.	What is a pointer? Explain with an example.
17.	How a pointer is declared, defined, and assigned a value?
18.	What is pointer algebra? Explain with example
19.	What is passing by value? And what is passing by reference? Explain with an example.
20.	What is advantages of pointers? Explain with an example. 
21.	What is dynamic memory allocation? What is advantage of dynamic memory allocation? 
22.	Distinguish between malloc and calloc function in C language
23.	Explain dynamic memory related functions, malloc, calloc, free and realloc.
24.	Distinguish between the two different representations of 2D array, array of pointers, and pointer to contiguous 1D arrays.
25.	
